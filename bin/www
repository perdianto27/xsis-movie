#!/usr/bin/env node
require("dotenv").config();

const app = require("../index");
const http = require("http");
const handleErrors = require("../src/middlewares/error-handler");
const { db } = require("../src/models");

const normalizePort = (intPort) => {
	const port = parseInt(intPort, 10);

	if (isNaN(port)) {
		return intPort;
	}

	if (intPort >= 0) {
		return port;
	}

	return false;
};

const port = normalizePort(process.env.NODE_PORT || "4000");

app.set("port", port);

app.use(handleErrors);

const server = http.createServer(app);

function onError(error) {
	if (error.syscall !== "listen") {
		throw error;
	}
	const bind = typeof port === "string" ? `Pipe ${port}` : `Port  ${port}`;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case "EACCES":
			log.error(`${bind} requires elevated privileges`);
			process.exit(1);
		case "EADDRINUSE":
			log.error(`${bind} is already in use`);
			process.exit(1);
		default:
			throw error;
	}
}

server.on("error", onError);
server.on("listening", async () => {
	const address = server.address();
	const bind = typeof address === "string" ? "pipe " + address : "port " + port;
	await db.sequelize.authenticate();
	console.log("Listening on " + bind);
});

server.listen(port);
